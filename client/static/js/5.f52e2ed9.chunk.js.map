{"version":3,"sources":["components/home-page/tasks-page/helpers/changeColor.js","components/home-page/tasks-page/helpers/Tasks.styled.js","components/home-page/tasks-page/helpers/statusTasksColor.js","components/home-page/tasks-page/helpers/components/CustomCheckbox.styled.js","components/home-page/tasks-page/helpers/components/CustomCheckbox.jsx","components/home-page/tasks-page/helpers/components/TaskComponent.jsx","components/home-page/tasks-page/helpers/components/ColumnTab.jsx","components/home-page/tasks-page/helpers/components/Filter.jsx","components/home-page/tasks-page/helpers/components/CreateTask.jsx","components/home-page/tasks-page/requests/getTasks.js","components/home-page/tasks-page/helpers/components/Progress.jsx","components/home-page/tasks-page/helpers/components/TabsBlock.jsx","components/home-page/tasks-page/helpers/components/TableTab.jsx","components/home-page/tasks-page/Tasks.jsx","components/home-page/tasks-page/helpers/createTagQueryString.js"],"names":["changeColor","type","TahomaWrapper","styled","div","TasksSortedStyled","HeaderBlock","props","ContentBlock","ProgressComponentStyled","status","UpperPanelFirstLayer","UpperPanelSecondLayer","TaskComponentStyled","BoldContainer","OpacityParagraph","p","BreakWordParagraph","CustomCheckboxStyled","span","active","CustomCheckbox","onClick","TaskComponent","task","setCompletedTasks","setTasks","setReservTasks","useState","setActive","onClickChangeActive","a","prev","for","createComment","Url","text","name","color","editTask","_id","done","archived","completedOn","moment","toISOString","filter","complTask","uncompleTask","swallErr","to","portable","contains","tags","length","map","tag","deadline","format","ColumnTab","tasks","children","Filter","filterObj","Option","Select","setFilter","optionTags","setOptionTags","useEffect","getTags","getTagsFromServer","mode","onChange","event","value","CreateTask","url","setAllTasks","filterTasks","opened","setOpened","onOkOrCancel","Fragment","width","className","visible","onOk","onCancel","footer","setOpenedModal","setRelTasks","getTasks","tagsQuery","axios","get","headers","authorization","localStorage","getItem","data","Progress","reservTasks","completedTasks","statusTasks","TabPane","Tabs","TabsBlock","viewbagFunnel","viewbagTable","defaultActiveKey","tab","TableTab","setTodayTasks","setExpiredTasks","setTomorrowTasks","isBefore","endOf","isAfter","dataSource","complete","forLink","key","columns","title","dataIndex","render","DeleteOutlined","style","fontSize","Tasks","allTasks","expiredTasks","todayTasks","futureTasks","setFutureTasks","setStatusTasks","tagQuery","el","join","createTagQueryString","filteredExpiredTasks","filteredTodayTasks","filteredFutureTasks","filterExpiredTasksOnCompleteDate","subtract","filterFutureTasksOnCompleteDate","getTasksFromServer","Math","round"],"mappings":"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","file":"static/js/5.f52e2ed9.chunk.js","sourcesContent":["export const changeColor = (type) => {\n  if (type === \"Expired\") return \"crimson\"\n  if (type === \"Today\") return \"#6290FF\"\n  if (type === \"Tomorrow\") return \"#7C9C51\"\n}","import styled from \"@emotion/styled\"\nimport {changeColor} from \"./changeColor\";\nimport {statusTasksColor} from \"./statusTasksColor\";\n\nexport const TahomaWrapper = styled.div`\n  font-family: Tahoma, sans-serief;\n`\nexport const TasksSortedStyled = styled.div`\n  display: flex;\n  color: black;\n  > div {\n    width: calc(100% / 3);\n  }\n`\nexport const HeaderBlock = styled.div`\n  margin: 0 0 8px 0;\n  position: relative;\n  text-align: center;\n  padding: 5px 0;\n  font-size: 20px;\n  font-weight: 600;\n  border-bottom: 4px solid ${props => changeColor(props.type)};\n  &::before {\n    position: absolute;\n    content: \"\";\n    display: inline-block;\n    bottom: -19px;\n    right: calc(50% - 8px);\n    border-right: 8px solid transparent;\n    border-left: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n    border-top: 8px solid ${props => changeColor(props.type)};\n  }\n`\nexport const ContentBlock = styled.div`\n  padding: 0 5px 0 5px;\n`\nexport const ProgressComponentStyled = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  padding: 5px;\n  background: ${props => statusTasksColor(props.status)};\n  margin: 0 0 10px 0;\n  font-size: 20px;\n  p {margin: 0;}\n`\nexport const UpperPanelFirstLayer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  > div:first-of-type {\n    flex: 0 0 90%;\n  }\n`\nexport const UpperPanelSecondLayer = styled.div`\n  display: flex;\n  > .ant-select {\n    flex: 0 1 300px;\n  }\n  > button {\n    margin: 0 10px;\n  }\n`\nexport const TaskComponentStyled = styled.div`\n  background: white;\n  margin: 10px 0;\n  padding: 5px;\n  border-radius: 2px;\n  border: 1px solid ${props => changeColor(props.type)};\n  border-top: 4px solid ${props => changeColor(props.type)};\n  > p {\n    margin: 0;\n    word-break: break-word;\n  }\n`\nexport const BoldContainer = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n`\nexport const OpacityParagraph = styled.p`\n  opacity: 0.8;\n`\nexport const BreakWordParagraph = styled.p`\n  word-break: break-word;\n`","export const statusTasksColor = (status) => {\n  if (status < 60) return \"#DC143C\"\n  if (status < 90 && status >= 60) return \"#F6CD52\"\n  if (status >= 90) return \"#7C9C51\"\n}","import styled from \"@emotion/styled\"\nimport {changeColor} from \"../changeColor\";\n\nexport const CustomCheckboxStyled = styled.span`\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 22px;\n  min-height: 22px;\n  max-width: 22px;\n  max-height: 22px;\n  background: transparent;\n  border: 1px solid ${props => changeColor(props.type)};\n  border-radius: 50%;\n  margin: 0 5px 0 0;\n  > span {\n    display: inline-block;\n    min-width: 16px;\n    min-height: 16px;\n    transition: all .2s ease;\n    background: ${props => props.active ? changeColor(props.type) : \"transparent\"};\n    border-radius: 50%;\n    &:hover {\n      opacity: 0.8;\n    }\n  }\n`","import React from \"react\"\nimport {CustomCheckboxStyled} from \"./CustomCheckbox.styled\";\n\nexport const CustomCheckbox = ({active, onClick, type}) => {\n\n  return (\n    <CustomCheckboxStyled onClick={onClick} active={active} type={type}>\n      <span></span>\n    </CustomCheckboxStyled>\n  )\n}","import moment from 'moment'\r\nimport { useState } from 'react'\r\n\r\nimport {\r\n  BoldContainer,\r\n  OpacityParagraph,\r\n  TaskComponentStyled,\r\n} from '../Tasks.styled'\r\nimport { CustomCheckbox } from './CustomCheckbox'\r\nimport { editTask } from '../../../student/pageStudent/chat/task-item/requests/editTask'\r\nimport Url from '../../../../../url/url'\r\nimport { StatusesBlock } from '../../../sales-funnel/helpers/sales-funnel-styled'\r\nimport { Tag } from 'antd'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { createComment } from '../../../student/pageStudent/chat/task-item/requests/createComment'\r\nimport { swallErr } from '../../../../../alert/alert'\r\n\r\nexport const TaskComponent = ({\r\n  task,\r\n  type,\r\n  setCompletedTasks,\r\n  setTasks,\r\n  setReservTasks,\r\n}) => {\r\n  // useState\r\n  const [active, setActive] = useState(false)\r\n  // useState\r\n\r\n  // methods\r\n  const onClickChangeActive = async () => {\r\n    try {\r\n      setActive((prev) => (prev = !prev))\r\n      if (task.for) {\r\n        await createComment(Url, task.for, {\r\n          text: `${task.name}\\n${task.text}`,\r\n          color: 'crimson',\r\n        })\r\n      }\r\n      await editTask(Url, task._id, {\r\n        done: true,\r\n        archived: true,\r\n        completedOn: moment().toISOString(),\r\n      })\r\n      task.done = true\r\n      setCompletedTasks(\r\n        (prev) => (prev = [...prev, task].filter((complTask) => complTask.done))\r\n      )\r\n      if (type !== 'Today') setReservTasks((prev) => (prev = [...prev, task]))\r\n      setTasks(\r\n        (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\r\n      )\r\n    } catch (err) {\r\n      swallErr('Ошибка!', 'Что-то пошло не так...')\r\n    }\r\n  }\r\n  // methods\r\n\r\n  return (\r\n    <TaskComponentStyled type={active ? 'Tomorrow' : type}>\r\n      <BoldContainer>\r\n        <CustomCheckbox\r\n          active={active}\r\n          onClick={onClickChangeActive}\r\n          type={active ? 'Tomorrow' : type}\r\n        />\r\n        {task.for ? (\r\n          <NavLink to={`/student/${task?.for || ''}`}>{task.name}</NavLink>\r\n        ) : (\r\n          task.name\r\n        )}\r\n        <StatusesBlock portable={false} contains={task.tags.length}>\r\n          {task.tags.map((tag) => (\r\n            <Tag key={tag._id} color={tag.color}>\r\n              {tag.name}\r\n            </Tag>\r\n          ))}\r\n        </StatusesBlock>\r\n      </BoldContainer>\r\n      <OpacityParagraph>\r\n        До: {moment(task?.deadline).format('DD/MM/YYYY | HH:mm')}\r\n      </OpacityParagraph>\r\n      <p>{task?.text}</p>\r\n    </TaskComponentStyled>\r\n  )\r\n}\r\n","import { ContentBlock, HeaderBlock } from '../Tasks.styled'\nimport { TaskComponent } from './TaskComponent'\n\nexport const ColumnTab = ({\n  tasks,\n  type,\n  children,\n  setReservTasks,\n  setCompletedTasks,\n  setTasks = () => {},\n}) => {\n  return (\n    <div>\n      <HeaderBlock type={type}>{children}</HeaderBlock>\n      <ContentBlock>\n        {tasks.map((task) => (\n          <TaskComponent\n            key={task._id}\n            task={task}\n            type={type}\n            setCompletedTasks={setCompletedTasks}\n            setTasks={setTasks}\n            setReservTasks={setReservTasks}\n          />\n        ))}\n      </ContentBlock>\n    </div>\n  )\n}\n","import {useEffect, useState} from \"react\"\nimport {Select} from \"antd\"\nimport {getTags} from \"../../../student/pageStudent/chat/task-item/requests/getTags\";\nimport Url from \"../../../../../url/url\";\n\nexport const Filter = ({filterObj}) => {\n\n  // data\n  const {Option} = Select\n  const {setFilter} = filterObj\n  // data\n\n  // useState\n  const [optionTags, setOptionTags] = useState([])\n  // useState\n\n  // useEffect\n  useEffect(() => {\n    const getTagsFromServer = async () => {\n      const tags = await getTags(Url)\n      setOptionTags(prev => prev = tags)\n    }\n    getTagsFromServer()\n  }, [])\n  // useEffect\n\n  // methods\n  const onChangeFilter = (event) => {\n    setFilter(prev => prev = event)\n  }\n  // methods\n\n  return (\n    <Select mode=\"multiple\" onChange={onChangeFilter}>\n      {optionTags.map(tag => (\n        <Option key={tag._id} value={tag._id}>{tag.name}</Option>\n      ))}\n    </Select>\n  )\n}","import React, {useState} from \"react\"\nimport {Button, Modal} from \"antd\"\nimport {CreateTaskComponent} from \"../../../student/pageStudent/chat/task-item/CreateTask\";\n\nexport const CreateTask = ({url, setAllTasks, filterTasks}) => {\n\n  // useState\n  const [opened, setOpened] = useState(false)\n  // useState\n\n  // methods\n  const onClickOpenModal = () => {\n    setOpened(prev => prev = !prev)\n  }\n  const onOkOrCancel = () => {\n    setOpened(prev => prev = false)\n  }\n  // methods\n\n  return (\n    <React.Fragment>\n      <Button type=\"primary\" onClick={onClickOpenModal}>Создать задачу</Button>\n      <Modal width={800} className=\"nonePaddingModal\" visible={opened} onOk={onOkOrCancel} onCancel={onOkOrCancel}\n             footer={\"\"}>\n        <CreateTaskComponent setOpenedModal={setOpened} setRelTasks={setAllTasks} portable={false}\n                             filterTasks={filterTasks}/>\n      </Modal>\n    </React.Fragment>\n  )\n}","import axios from \"axios\";\r\n\r\nexport const getTasks = async (url, tagsQuery = \"\") => {\r\n  const tasks = await axios.get(\r\n    `${url}/CRM/Tasks/CurrentUserTasks${tagsQuery}`,\r\n    {\r\n      headers: {\r\n        authorization: `Bearer ${localStorage.getItem(\"tokenID\")}`,\r\n      },\r\n    }\r\n  );\r\n\r\n  return tasks.data;\r\n};\r\n","import React from \"react\"\nimport {ProgressComponentStyled} from \"../Tasks.styled\"\n\nexport const Progress = ({reservTasks, completedTasks, statusTasks}) => {\n  return (\n    <ProgressComponentStyled status={statusTasks}>\n      <div></div>\n      <p>\n        {completedTasks.length}/{reservTasks.length}\n      </p>\n    </ProgressComponentStyled>\n  )\n}","import React from \"react\"\nimport {Tabs} from \"antd\";\n\nconst {TabPane} = Tabs\n\nexport const TabsBlock = ({viewbagFunnel, viewbagTable}) => {\n  return (\n    <Tabs defaultActiveKey=\"1\">\n      <TabPane tab=\"Воронка\" key=\"1\">\n        {viewbagFunnel}\n      </TabPane>\n      <TabPane tab=\"Таблица\" key=\"2\">\n        {viewbagTable}\n      </TabPane>\n    </Tabs>\n  )\n}","import { Table, Tag } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { editTask } from \"../../../student/pageStudent/chat/task-item/requests/editTask\";\r\nimport Url from \"../../../../../url/url\";\r\nimport { StatusesBlock } from \"../../../sales-funnel/helpers/sales-funnel-styled\";\r\nimport { BreakWordParagraph } from \"../Tasks.styled\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const TableTab = ({\r\n  tasks,\r\n  setReservTasks,\r\n  setCompletedTasks,\r\n  setTodayTasks,\r\n  setExpiredTasks,\r\n  setTomorrowTasks,\r\n}) => {\r\n  // methods\r\n  const onClickChangeActive = async (task) => {\r\n    await editTask(Url, task._id, { done: true });\r\n    task.done = true;\r\n    setCompletedTasks((prev) => {\r\n      prev = [...prev, task].filter((complTask) => complTask.done);\r\n      return prev;\r\n    });\r\n    const condition =\r\n      moment(task.deadline).isBefore(moment().endOf(\"day\")) &&\r\n      moment(task.deadline).isAfter(moment().get());\r\n    if (!condition) setReservTasks((prev) => (prev = [...prev, task]));\r\n    setExpiredTasks(\r\n      (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\r\n    );\r\n    setTodayTasks(\r\n      (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\r\n    );\r\n    setTomorrowTasks(\r\n      (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\r\n    );\r\n  };\r\n  // methods\r\n\r\n  // data\r\n  const dataSource = tasks\r\n    .filter((task) => task.done !== true)\r\n    .map(\r\n      (task) =>\r\n        (task = {\r\n          ...task,\r\n          complete: task,\r\n          forLink: { for: task.for, name: task.name },\r\n          key: task._id,\r\n          deadline: moment(task.deadline).format(\"DD/MM/YYYY | HH:mm\"),\r\n        })\r\n    );\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"complete\",\r\n      key: \"complete\",\r\n      render: (task) => (\r\n        <DeleteOutlined\r\n          style={{ fontSize: \"20px\", color: \"crimson\" }}\r\n          onClick={() => onClickChangeActive(task)}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"Конечный срок\",\r\n      dataIndex: \"deadline\",\r\n      key: \"deadline\",\r\n    },\r\n    {\r\n      title: \"Название\",\r\n      dataIndex: \"forLink\",\r\n      key: \"forLink\",\r\n      render: (task) => {\r\n        return task.for ? (\r\n          <NavLink to={`/student/${task?.for || \"\"}`}>{task.name}</NavLink>\r\n        ) : (\r\n          <span>{task.name}</span>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Текст\",\r\n      dataIndex: \"text\",\r\n      key: \"text\",\r\n      render: (text) => <BreakWordParagraph>{text}</BreakWordParagraph>,\r\n    },\r\n    {\r\n      title: \"Тэги\",\r\n      dataIndex: \"tags\",\r\n      key: \"tags\",\r\n      render: (tags) => (\r\n        <StatusesBlock portable={true} contains={tags.length}>\r\n          {tags.map((tag) => (\r\n            <Tag key={tag._id} color={tag.color}>\r\n              {tag.name}\r\n            </Tag>\r\n          ))}\r\n        </StatusesBlock>\r\n      ),\r\n    },\r\n  ];\r\n  // data\r\n\r\n  return (\r\n    <div>\r\n      <Table columns={columns} dataSource={dataSource} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react'\r\nimport moment from 'moment'\r\n\r\nimport { ColumnTab } from './helpers/components/ColumnTab'\r\nimport {\r\n  TahomaWrapper,\r\n  TasksSortedStyled,\r\n  UpperPanelFirstLayer,\r\n  UpperPanelSecondLayer,\r\n} from './helpers/Tasks.styled'\r\nimport { Filter } from './helpers/components/Filter'\r\nimport { CreateTask } from './helpers/components/CreateTask'\r\nimport Url from '../../../url/url'\r\nimport { getTasks } from './requests/getTasks'\r\nimport { Progress } from './helpers/components/Progress'\r\nimport { createTagQueryString } from './helpers/createTagQueryString'\r\nimport { TabsBlock } from './helpers/components/TabsBlock'\r\nimport { TableTab } from './helpers/components/TableTab'\r\n\r\nconst Tasks = () => {\r\n  // useState\r\n  const [filter, setFilter] = useState([])\r\n  const [allTasks, setAllTasks] = useState([])\r\n  const [expiredTasks, setExpiredTasks] = useState([])\r\n  const [todayTasks, setTodayTasks] = useState([])\r\n  const [completedTasks, setCompletedTasks] = useState([])\r\n  const [reservTasks, setReservTasks] = useState([])\r\n  const [futureTasks, setFutureTasks] = useState([])\r\n  const [statusTasks, setStatusTasks] = useState(0)\r\n  // useState\r\n\r\n  // useEffect\r\n  useEffect(() => {\r\n    const tagQuery = createTagQueryString(filter)\r\n    const getTasksFromServer = async () => {\r\n      let tasks = await getTasks(Url, tagQuery)\r\n      const filteredExpiredTasks = tasks.filter((task) =>\r\n        moment(task.deadline).isBefore(moment().get())\r\n      )\r\n      const filteredTodayTasks = tasks.filter(\r\n        (task) =>\r\n          moment(task.deadline).isBefore(moment().endOf('day')) &&\r\n          moment(task.deadline).isAfter(moment().get())\r\n      )\r\n      const filteredFutureTasks = tasks.filter((task) =>\r\n        moment(task.deadline).isAfter(moment().endOf('day'))\r\n      )\r\n      const filterExpiredTasksOnCompleteDate = filteredExpiredTasks\r\n        .filter((task) => task.completedOn)\r\n        .filter(\r\n          (task) =>\r\n            moment(task.completedOn).isBefore(moment().endOf('day')) &&\r\n            moment(task.completedOn).isAfter(moment().subtract(1, 'days'))\r\n        )\r\n      const filterFutureTasksOnCompleteDate = filteredFutureTasks\r\n        .filter((task) => task.completedOn)\r\n        .filter(\r\n          (task) =>\r\n            moment(task.completedOn).isBefore(moment().endOf('day')) &&\r\n            moment(task.completedOn).isAfter(moment().subtract(1, 'days'))\r\n        )\r\n      setCompletedTasks(\r\n        (prev) =>\r\n          (prev = [\r\n            ...filterExpiredTasksOnCompleteDate,\r\n            ...filteredTodayTasks.filter((task) => task.done),\r\n            ...filterFutureTasksOnCompleteDate,\r\n          ])\r\n      )\r\n      setReservTasks(\r\n        (prev) =>\r\n          (prev = [\r\n            ...filterExpiredTasksOnCompleteDate,\r\n            ...filteredTodayTasks,\r\n            ...filterFutureTasksOnCompleteDate,\r\n          ])\r\n      )\r\n      setExpiredTasks(\r\n        (prev) => (prev = filteredExpiredTasks.filter((task) => !task.done))\r\n      )\r\n      setTodayTasks(\r\n        (prev) => (prev = filteredTodayTasks.filter((task) => !task.done))\r\n      )\r\n      setFutureTasks(\r\n        (prev) => (prev = filteredFutureTasks.filter((task) => !task.done))\r\n      )\r\n      setAllTasks((prev) => (prev = tasks))\r\n    }\r\n    getTasksFromServer()\r\n    return () => {\r\n      setExpiredTasks((prev) => (prev = []))\r\n      setTodayTasks((prev) => (prev = []))\r\n      setFutureTasks((prev) => (prev = []))\r\n      setAllTasks((prev) => (prev = []))\r\n      setCompletedTasks((prev) => (prev = []))\r\n    }\r\n  }, [filter])\r\n  useEffect(() => {\r\n    setStatusTasks(\r\n      (prev) =>\r\n        (prev = reservTasks.length\r\n          ? Math.round((completedTasks.length / reservTasks.length) * 100)\r\n          : 100)\r\n    )\r\n  }, [completedTasks, reservTasks])\r\n  // useEffect\r\n\r\n  // methods\r\n  const filterTasks = (tasks) => {\r\n    const filteredExpiredTasks = tasks.filter((task) =>\r\n      moment(task.deadline).isBefore(moment().get())\r\n    )\r\n    const filteredTodayTasks = tasks.filter(\r\n      (task) =>\r\n        moment(task.deadline).isBefore(moment().endOf('day')) &&\r\n        moment(task.deadline).isAfter(moment().get())\r\n    )\r\n    const filteredFutureTasks = tasks.filter((task) =>\r\n      moment(task.deadline).isAfter(moment().endOf('day'))\r\n    )\r\n    const filterExpiredTasksOnCompleteDate = filteredExpiredTasks\r\n      .filter((task) => task.completedOn)\r\n      .filter(\r\n        (task) =>\r\n          moment(task.completedOn).isBefore(moment().endOf('day')) &&\r\n          moment(task.completedOn).isAfter(moment().subtract(1, 'days'))\r\n      )\r\n    const filterFutureTasksOnCompleteDate = filteredFutureTasks\r\n      .filter((task) => task.completedOn)\r\n      .filter(\r\n        (task) =>\r\n          moment(task.completedOn).isBefore(moment().endOf('day')) &&\r\n          moment(task.completedOn).isAfter(moment().subtract(1, 'days'))\r\n      )\r\n    setReservTasks(\r\n      (prev) =>\r\n        (prev = [\r\n          ...filterExpiredTasksOnCompleteDate,\r\n          ...filteredTodayTasks,\r\n          ...filterFutureTasksOnCompleteDate,\r\n        ])\r\n    )\r\n    setExpiredTasks(\r\n      (prev) => (prev = filteredExpiredTasks.filter((task) => !task.done))\r\n    )\r\n    setTodayTasks(\r\n      (prev) => (prev = filteredTodayTasks.filter((task) => !task.done))\r\n    )\r\n    setFutureTasks(\r\n      (prev) => (prev = filteredFutureTasks.filter((task) => !task.done))\r\n    )\r\n    return tasks\r\n  }\r\n  // methods\r\n\r\n  // data\r\n  const viewbagFunnel = (\r\n    <TasksSortedStyled>\r\n      <ColumnTab\r\n        tasks={expiredTasks}\r\n        type=\"Expired\"\r\n        setCompletedTasks={setCompletedTasks}\r\n        setTasks={setExpiredTasks}\r\n        setReservTasks={setReservTasks}\r\n      >\r\n        Просроченные задачи\r\n      </ColumnTab>\r\n      <ColumnTab\r\n        tasks={todayTasks}\r\n        type=\"Today\"\r\n        setCompletedTasks={setCompletedTasks}\r\n        setTasks={setTodayTasks}\r\n      >\r\n        Задачи на сегодня\r\n      </ColumnTab>\r\n      <ColumnTab\r\n        tasks={futureTasks}\r\n        type=\"Tomorrow\"\r\n        setCompletedTasks={setCompletedTasks}\r\n        setTasks={setFutureTasks}\r\n        setReservTasks={setReservTasks}\r\n      >\r\n        Будущие задачи\r\n      </ColumnTab>\r\n    </TasksSortedStyled>\r\n  )\r\n  const viewbagTable = (\r\n    <React.Fragment>\r\n      <TableTab\r\n        tasks={allTasks}\r\n        setReservTasks={setReservTasks}\r\n        setCompletedTasks={setCompletedTasks}\r\n        setTodayTasks={setTodayTasks}\r\n        setExpiredTasks={setExpiredTasks}\r\n        setTomorrowTasks={setFutureTasks}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n  // data\r\n\r\n  return (\r\n    <TahomaWrapper>\r\n      <UpperPanelFirstLayer>\r\n        <Progress\r\n          reservTasks={reservTasks}\r\n          completedTasks={completedTasks}\r\n          statusTasks={statusTasks}\r\n        />\r\n      </UpperPanelFirstLayer>\r\n      <UpperPanelSecondLayer>\r\n        <Filter filterObj={{ filter, setFilter }} />\r\n        <CreateTask\r\n          url={Url}\r\n          filterTasks={filterTasks}\r\n          setAllTasks={setAllTasks}\r\n        />\r\n      </UpperPanelSecondLayer>\r\n      <TabsBlock viewbagFunnel={viewbagFunnel} viewbagTable={viewbagTable} />\r\n    </TahomaWrapper>\r\n  )\r\n}\r\n\r\nexport default Tasks\r\n","export const createTagQueryString = (filter) => {\n  if (!filter.length) return \"\"\n  if (filter.length === 1) return `?tag=${filter[0]}`\n  return `?tag=${filter[0]}${filter.filter(el => el !== filter[0]).map(el => el = `&tag=${el}`).join(\"\")}`\n}"],"sourceRoot":""}