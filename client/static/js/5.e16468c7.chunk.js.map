{"version":3,"sources":["components/home-page/tasks-page/helpers/changeColor.js","components/home-page/tasks-page/helpers/Tasks.styled.js","components/home-page/tasks-page/helpers/statusTasksColor.js","components/home-page/tasks-page/helpers/components/CustomCheckbox.styled.js","components/home-page/tasks-page/helpers/components/CustomCheckbox.jsx","components/home-page/tasks-page/helpers/components/TaskComponent.jsx","components/home-page/tasks-page/helpers/components/ColumnTab.jsx","components/home-page/tasks-page/helpers/components/Filter.jsx","components/home-page/tasks-page/helpers/components/CreateTask.jsx","components/home-page/tasks-page/requests/getTasks.js","components/home-page/tasks-page/helpers/components/Progress.jsx","components/home-page/tasks-page/helpers/components/TabsBlock.jsx","components/home-page/tasks-page/helpers/components/TableTab.jsx","components/home-page/tasks-page/Tasks.jsx","components/home-page/tasks-page/helpers/createTagQueryString.js"],"names":["changeColor","type","TahomaWrapper","styled","div","TasksSortedStyled","HeaderBlock","props","ContentBlock","ProgressComponentStyled","status","UpperPanelFirstLayer","UpperPanelSecondLayer","TaskComponentStyled","BoldContainer","OpacityParagraph","p","BreakWordParagraph","CustomCheckboxStyled","span","active","CustomCheckbox","onClick","TaskComponent","task","setCompletedTasks","setTasks","setReservTasks","useState","setActive","onClickChangeActive","a","prev","for","createComment","Url","text","name","color","editTask","_id","done","archived","completedOn","moment","toISOString","filter","complTask","uncompleTask","console","log","swallError","to","portable","contains","tags","length","map","tag","deadline","format","ColumnTab","tasks","children","Filter","filterObj","Option","Select","setFilter","optionTags","setOptionTags","useEffect","getTagsFromServer","getTags","mode","onChange","event","value","CreateTask","url","setAllTasks","filterTasks","opened","setOpened","onOkOrCancel","Fragment","width","className","visible","onOk","onCancel","footer","setOpenedModal","setRelTasks","getTasks","tagsQuery","axios","get","headers","authorization","localStorage","getItem","data","Progress","reservTasks","completedTasks","statusTasks","TabPane","Tabs","TabsBlock","viewbagFunnel","viewbagTable","defaultActiveKey","tab","TableTab","setTodayTasks","setExpiredTasks","setTomorrowTasks","isBefore","endOf","isAfter","dataSource","complete","forLink","key","columns","title","dataIndex","render","DeleteOutlined","style","fontSize","Tasks","allTasks","expiredTasks","todayTasks","futureTasks","setFutureTasks","setStatusTasks","tagQuery","el","join","createTagQueryString","getTasksFromServer","filteredExpiredTasks","filteredTodayTasks","filteredFutureTasks","filterExpiredTasksOnCompleteDate","subtract","filterFutureTasksOnCompleteDate","Math","round"],"mappings":"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","file":"static/js/5.e16468c7.chunk.js","sourcesContent":["export const changeColor = (type) => {\n    if (type === \"Expired\") return \"crimson\"\n    if (type === \"Today\") return \"#6290FF\"\n    if (type === \"Tomorrow\") return \"#7C9C51\"\n}","import styled from \"@emotion/styled\"\nimport {changeColor} from \"./changeColor\";\nimport {statusTasksColor} from \"./statusTasksColor\";\n\nexport const TahomaWrapper = styled.div`\n  font-family: Tahoma, sans-serief;\n`\nexport const TasksSortedStyled = styled.div`\n  display: flex;\n  color: black;\n  > div {\n    width: calc(100% / 3);\n  }\n`\nexport const HeaderBlock = styled.div`\n  margin: 0 0 8px 0;\n  position: relative;\n  text-align: center;\n  padding: 5px 0;\n  font-size: 20px;\n  font-weight: 600;\n  border-bottom: 4px solid ${props => changeColor(props.type)};\n  &::before {\n    position: absolute;\n    content: \"\";\n    display: inline-block;\n    bottom: -19px;\n    right: calc(50% - 8px);\n    border-right: 8px solid transparent;\n    border-left: 8px solid transparent;\n    border-bottom: 8px solid transparent;\n    border-top: 8px solid ${props => changeColor(props.type)};\n  }\n`\nexport const ContentBlock = styled.div`\n  padding: 0 5px 0 5px;\n`\nexport const ProgressComponentStyled = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  padding: 5px;\n  background: ${props => statusTasksColor(props.status)};\n  margin: 0 0 10px 0;\n  font-size: 20px;\n  p {margin: 0;}\n`\nexport const UpperPanelFirstLayer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  > div:first-of-type {\n    flex: 0 0 90%;\n  }\n`\nexport const UpperPanelSecondLayer = styled.div`\n  display: flex;\n  > .ant-select {\n    flex: 0 1 300px;\n  }\n  > button {\n    margin: 0 10px;\n  }\n`\nexport const TaskComponentStyled = styled.div`\n  background: white;\n  margin: 10px 0;\n  padding: 5px;\n  border-radius: 2px;\n  border: 1px solid ${props => changeColor(props.type)};\n  border-top: 4px solid ${props => changeColor(props.type)};\n  > p {\n    margin: 0;\n    word-break: break-word;\n  }\n`\nexport const BoldContainer = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n`\nexport const OpacityParagraph = styled.p`\n  opacity: 0.8;\n`\nexport const BreakWordParagraph = styled.p`\n  word-break: break-word;\n`","export const statusTasksColor = (status) => {\n    if (status < 60) return \"#DC143C\"\n    if (status < 90 && status >= 60) return \"#F6CD52\"\n    if (status >= 90) return \"#7C9C51\"\n}","import styled from \"@emotion/styled\"\nimport {changeColor} from \"../changeColor\";\n\nexport const CustomCheckboxStyled = styled.span`\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 22px;\n  min-height: 22px;\n  max-width: 22px;\n  max-height: 22px;\n  background: transparent;\n  border: 1px solid ${props => changeColor(props.type)};\n  border-radius: 50%;\n  margin: 0 5px 0 0;\n  > span {\n    display: inline-block;\n    min-width: 16px;\n    min-height: 16px;\n    transition: all .2s ease;\n    background: ${props => props.active ? changeColor(props.type) : \"transparent\"};\n    border-radius: 50%;\n    &:hover {\n      opacity: 0.8;\n    }\n  }\n`","import React from \"react\"\nimport {CustomCheckboxStyled} from \"./CustomCheckbox.styled\";\n\nexport const CustomCheckbox = ({active, onClick, type}) => {\n\n    return (\n        <CustomCheckboxStyled onClick={onClick} active={active} type={type}>\n            <span></span>\n        </CustomCheckboxStyled>\n    )\n}","import moment from \"moment\";\nimport {useState} from \"react\";\n\nimport {BoldContainer, OpacityParagraph, TaskComponentStyled,} from \"../Tasks.styled\";\nimport {CustomCheckbox} from \"./CustomCheckbox\";\nimport {editTask} from \"../../../student/pageStudent/chat/task-item/requests/editTask\";\nimport Url from \"../../../../../url/url\";\nimport {StatusesBlock} from \"../../../sales-funnel/helpers/sales-funnel-styled\";\nimport {Tag} from \"antd\";\nimport {NavLink} from \"react-router-dom\";\nimport {createComment} from \"../../../student/pageStudent/chat/task-item/requests/createComment\";\nimport {swallError} from \"../../../../../alert/alert\";\n\nexport const TaskComponent = ({\n                                  task,\n                                  type,\n                                  setCompletedTasks,\n                                  setTasks,\n                                  setReservTasks,\n                              }) => {\n    // useState\n    const [active, setActive] = useState(false);\n    // useState\n\n    // methods\n    const onClickChangeActive = async () => {\n        try {\n            setActive((prev) => (prev = !prev));\n            if (task.for) {\n                await createComment(Url, task.for, {\n                    text: `${task.name}\\n${task.text}`,\n                    color: \"crimson\",\n                });\n            }\n            await editTask(Url, task._id, {\n                done: true,\n                archived: true,\n                completedOn: moment().toISOString(),\n            });\n            task.done = true;\n            setCompletedTasks(\n                (prev) => (prev = [...prev, task].filter((complTask) => complTask.done))\n            );\n            if (type !== \"Today\") setReservTasks((prev) => (prev = [...prev, task]));\n            setTasks(\n                (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\n            );\n        } catch (err) {\n            console.log(err);\n            swallError(\"Ошибка!\", \"Что-то пошло не так...\");\n        }\n    };\n    // methods\n\n    return (\n        <TaskComponentStyled type={active ? \"Tomorrow\" : type}>\n            <BoldContainer>\n                <CustomCheckbox\n                    active={active}\n                    onClick={onClickChangeActive}\n                    type={active ? \"Tomorrow\" : type}\n                />\n                {task.for ? (\n                    <NavLink to={`/student/${task?.for || \"\"}`}>{task.name}</NavLink>\n                ) : (\n                    task.name\n                )}\n                <StatusesBlock portable={false} contains={task.tags.length}>\n                    {task.tags.map((tag) => (\n                        <Tag key={tag._id} color={tag.color}>\n                            {tag.name}\n                        </Tag>\n                    ))}\n                </StatusesBlock>\n            </BoldContainer>\n            <OpacityParagraph>\n                До: {moment(task?.deadline).format(\"DD/MM/YYYY | HH:mm\")}\n            </OpacityParagraph>\n            <p>{task?.text}</p>\n        </TaskComponentStyled>\n    );\n};\n","import {ContentBlock, HeaderBlock} from '../Tasks.styled'\nimport {TaskComponent} from './TaskComponent'\n\nexport const ColumnTab = ({\n                              tasks,\n                              type,\n                              children,\n                              setReservTasks,\n                              setCompletedTasks,\n                              setTasks = () => {\n                              },\n                          }) => {\n    return (\n        <div>\n            <HeaderBlock type={type}>{children}</HeaderBlock>\n            <ContentBlock>\n                {tasks.map((task) => (\n                    <TaskComponent\n                        key={task._id}\n                        task={task}\n                        type={type}\n                        setCompletedTasks={setCompletedTasks}\n                        setTasks={setTasks}\n                        setReservTasks={setReservTasks}\n                    />\n                ))}\n            </ContentBlock>\n        </div>\n    )\n}\n","import {useEffect, useState} from \"react\"\nimport {Select} from \"antd\"\nimport {getTags} from \"../../../student/pageStudent/chat/task-item/requests/getTags\";\nimport Url from \"../../../../../url/url\";\n\nexport const Filter = ({filterObj}) => {\n\n    // data\n    const {Option} = Select\n    const {setFilter} = filterObj\n    // data\n\n    // useState\n    const [optionTags, setOptionTags] = useState([])\n    // useState\n\n    // useEffect\n    useEffect(() => {\n        const getTagsFromServer = async () => {\n            const tags = await getTags(Url)\n            setOptionTags(prev => prev = tags)\n        }\n        getTagsFromServer()\n    }, [])\n    // useEffect\n\n    // methods\n    const onChangeFilter = (event) => {\n        setFilter(prev => prev = event)\n    }\n    // methods\n\n    return (\n        <Select mode=\"multiple\" onChange={onChangeFilter}>\n            {optionTags.map(tag => (\n                <Option key={tag._id} value={tag._id}>{tag.name}</Option>\n            ))}\n        </Select>\n    )\n}","import React, {useState} from \"react\"\nimport {Button, Modal} from \"antd\"\nimport {CreateTaskComponent} from \"../../../student/pageStudent/chat/task-item/CreateTask\";\n\nexport const CreateTask = ({url, setAllTasks, filterTasks}) => {\n\n    // useState\n    const [opened, setOpened] = useState(false)\n    // useState\n\n    // methods\n    const onClickOpenModal = () => {\n        setOpened(prev => prev = !prev)\n    }\n    const onOkOrCancel = () => {\n        setOpened(prev => prev = false)\n    }\n    // methods\n\n    return (\n        <React.Fragment>\n            <Button type=\"primary\" onClick={onClickOpenModal}>Создать задачу</Button>\n            <Modal width={800} className=\"nonePaddingModal\" visible={opened} onOk={onOkOrCancel} onCancel={onOkOrCancel}\n                   footer={\"\"}>\n                <CreateTaskComponent setOpenedModal={setOpened} setRelTasks={setAllTasks} portable={false}\n                                     filterTasks={filterTasks}/>\n            </Modal>\n        </React.Fragment>\n    )\n}","import axios from \"axios\";\n\nexport const getTasks = async (url, tagsQuery = \"\") => {\n    const tasks = await axios.get(\n        `${url}/CRM/Tasks/CurrentUserTasks${tagsQuery}`,\n        {\n            headers: {\n                authorization: `Bearer ${localStorage.getItem(\"tokenID\")}`,\n            },\n        }\n    );\n\n    return tasks.data;\n};\n","import React from \"react\"\nimport {ProgressComponentStyled} from \"../Tasks.styled\"\n\nexport const Progress = ({reservTasks, completedTasks, statusTasks}) => {\n    return (\n        <ProgressComponentStyled status={statusTasks}>\n            <div></div>\n            <p>\n                {completedTasks.length}/{reservTasks.length}\n            </p>\n        </ProgressComponentStyled>\n    )\n}","import React from \"react\"\nimport {Tabs} from \"antd\";\n\nconst {TabPane} = Tabs\n\nexport const TabsBlock = ({viewbagFunnel, viewbagTable}) => {\n    return (\n        <Tabs defaultActiveKey=\"1\">\n            <TabPane tab=\"Воронка\" key=\"1\">\n                {viewbagFunnel}\n            </TabPane>\n            <TabPane tab=\"Таблица\" key=\"2\">\n                {viewbagTable}\n            </TabPane>\n        </Tabs>\n    )\n}","import {Table, Tag} from \"antd\";\nimport moment from \"moment\";\n\nimport {DeleteOutlined} from \"@ant-design/icons\";\nimport {editTask} from \"../../../student/pageStudent/chat/task-item/requests/editTask\";\nimport Url from \"../../../../../url/url\";\nimport {StatusesBlock} from \"../../../sales-funnel/helpers/sales-funnel-styled\";\nimport {BreakWordParagraph} from \"../Tasks.styled\";\nimport {NavLink} from \"react-router-dom\";\n\nexport const TableTab = ({\n                             tasks,\n                             setReservTasks,\n                             setCompletedTasks,\n                             setTodayTasks,\n                             setExpiredTasks,\n                             setTomorrowTasks,\n                         }) => {\n    // methods\n    const onClickChangeActive = async (task) => {\n        await editTask(Url, task._id, {done: true});\n        task.done = true;\n        setCompletedTasks((prev) => {\n            prev = [...prev, task].filter((complTask) => complTask.done);\n            return prev;\n        });\n        const condition =\n            moment(task.deadline).isBefore(moment().endOf(\"day\")) &&\n            moment(task.deadline).isAfter(moment().get());\n        if (!condition) setReservTasks((prev) => (prev = [...prev, task]));\n        setExpiredTasks(\n            (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\n        );\n        setTodayTasks(\n            (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\n        );\n        setTomorrowTasks(\n            (prev) => (prev = prev.filter((uncompleTask) => !uncompleTask.done))\n        );\n    };\n    // methods\n\n    // data\n    const dataSource = tasks\n        .filter((task) => task.done !== true)\n        .map(\n            (task) =>\n                (task = {\n                    ...task,\n                    complete: task,\n                    forLink: {for: task.for, name: task.name},\n                    key: task._id,\n                    deadline: moment(task.deadline).format(\"DD/MM/YYYY | HH:mm\"),\n                })\n        );\n    const columns = [\n        {\n            title: \"\",\n            dataIndex: \"complete\",\n            key: \"complete\",\n            render: (task) => (\n                <DeleteOutlined\n                    style={{fontSize: \"20px\", color: \"crimson\"}}\n                    onClick={() => onClickChangeActive(task)}\n                />\n            ),\n        },\n        {\n            title: \"Конечный срок\",\n            dataIndex: \"deadline\",\n            key: \"deadline\",\n        },\n        {\n            title: \"Название\",\n            dataIndex: \"forLink\",\n            key: \"forLink\",\n            render: (task) => {\n                return task.for ? (\n                    <NavLink to={`/student/${task?.for || \"\"}`}>{task.name}</NavLink>\n                ) : (\n                    <span>{task.name}</span>\n                );\n            },\n        },\n        {\n            title: \"Текст\",\n            dataIndex: \"text\",\n            key: \"text\",\n            render: (text) => <BreakWordParagraph>{text}</BreakWordParagraph>,\n        },\n        {\n            title: \"Тэги\",\n            dataIndex: \"tags\",\n            key: \"tags\",\n            render: (tags) => (\n                <StatusesBlock portable={true} contains={tags.length}>\n                    {tags.map((tag) => (\n                        <Tag key={tag._id} color={tag.color}>\n                            {tag.name}\n                        </Tag>\n                    ))}\n                </StatusesBlock>\n            ),\n        },\n    ];\n    // data\n\n    return (\n        <div>\n            <Table columns={columns} dataSource={dataSource}/>\n        </div>\n    );\n};\n","import React, {useEffect, useState} from \"react\";\nimport moment from \"moment\";\n\nimport {ColumnTab} from \"./helpers/components/ColumnTab\";\nimport {TahomaWrapper, TasksSortedStyled, UpperPanelFirstLayer, UpperPanelSecondLayer,} from \"./helpers/Tasks.styled\";\nimport {Filter} from \"./helpers/components/Filter\";\nimport {CreateTask} from \"./helpers/components/CreateTask\";\nimport Url from \"../../../url/url\";\nimport {getTasks} from \"./requests/getTasks\";\nimport {Progress} from \"./helpers/components/Progress\";\nimport {createTagQueryString} from \"./helpers/createTagQueryString\";\nimport {TabsBlock} from \"./helpers/components/TabsBlock\";\nimport {TableTab} from \"./helpers/components/TableTab\";\n\nconst Tasks = () => {\n    // useState\n    const [filter, setFilter] = useState([]);\n    const [allTasks, setAllTasks] = useState([]);\n    const [expiredTasks, setExpiredTasks] = useState([]);\n    const [todayTasks, setTodayTasks] = useState([]);\n    const [completedTasks, setCompletedTasks] = useState([]);\n    const [reservTasks, setReservTasks] = useState([]);\n    const [futureTasks, setFutureTasks] = useState([]);\n    const [statusTasks, setStatusTasks] = useState(0);\n    // useState\n\n    // useEffect\n    useEffect(() => {\n        const tagQuery = createTagQueryString(filter);\n        const getTasksFromServer = async () => {\n            let tasks = await getTasks(Url, tagQuery);\n            const filteredExpiredTasks = tasks.filter((task) =>\n                moment(task.deadline).isBefore(moment().get())\n            );\n            const filteredTodayTasks = tasks.filter(\n                (task) =>\n                    moment(task.deadline).isBefore(moment().endOf(\"day\")) &&\n                    moment(task.deadline).isAfter(moment().get())\n            );\n            const filteredFutureTasks = tasks.filter((task) =>\n                moment(task.deadline).isAfter(moment().endOf(\"day\"))\n            );\n            const filterExpiredTasksOnCompleteDate = filteredExpiredTasks\n                .filter((task) => task.completedOn)\n                .filter(\n                    (task) =>\n                        moment(task.completedOn).isBefore(moment().endOf(\"day\")) &&\n                        moment(task.completedOn).isAfter(moment().subtract(1, \"days\"))\n                );\n            const filterFutureTasksOnCompleteDate = filteredFutureTasks\n                .filter((task) => task.completedOn)\n                .filter(\n                    (task) =>\n                        moment(task.completedOn).isBefore(moment().endOf(\"day\")) &&\n                        moment(task.completedOn).isAfter(moment().subtract(1, \"days\"))\n                );\n            setCompletedTasks(\n                (prev) =>\n                    (prev = [\n                        ...filterExpiredTasksOnCompleteDate,\n                        ...filteredTodayTasks.filter((task) => task.done),\n                        ...filterFutureTasksOnCompleteDate,\n                    ])\n            );\n            setReservTasks(\n                (prev) =>\n                    (prev = [\n                        ...filterExpiredTasksOnCompleteDate,\n                        ...filteredTodayTasks,\n                        ...filterFutureTasksOnCompleteDate,\n                    ])\n            );\n            setExpiredTasks(\n                (prev) => (prev = filteredExpiredTasks.filter((task) => !task.done))\n            );\n            setTodayTasks(\n                (prev) => (prev = filteredTodayTasks.filter((task) => !task.done))\n            );\n            setFutureTasks(\n                (prev) => (prev = filteredFutureTasks.filter((task) => !task.done))\n            );\n            setAllTasks((prev) => (prev = tasks));\n        };\n        getTasksFromServer();\n        return () => {\n            setExpiredTasks((prev) => (prev = []));\n            setTodayTasks((prev) => (prev = []));\n            setFutureTasks((prev) => (prev = []));\n            setAllTasks((prev) => (prev = []));\n            setCompletedTasks((prev) => (prev = []));\n        };\n    }, [filter]);\n    useEffect(() => {\n        setStatusTasks(\n            (prev) =>\n                (prev = reservTasks.length\n                    ? Math.round((completedTasks.length / reservTasks.length) * 100)\n                    : 100)\n        );\n    }, [completedTasks, reservTasks]);\n    // useEffect\n\n    // methods\n    const filterTasks = (tasks) => {\n        const filteredExpiredTasks = tasks.filter((task) =>\n            moment(task.deadline).isBefore(moment().get())\n        );\n        const filteredTodayTasks = tasks.filter(\n            (task) =>\n                moment(task.deadline).isBefore(moment().endOf(\"day\")) &&\n                moment(task.deadline).isAfter(moment().get())\n        );\n        const filteredFutureTasks = tasks.filter((task) =>\n            moment(task.deadline).isAfter(moment().endOf(\"day\"))\n        );\n        const filterExpiredTasksOnCompleteDate = filteredExpiredTasks\n            .filter((task) => task.completedOn)\n            .filter(\n                (task) =>\n                    moment(task.completedOn).isBefore(moment().endOf(\"day\")) &&\n                    moment(task.completedOn).isAfter(moment().subtract(1, \"days\"))\n            );\n        const filterFutureTasksOnCompleteDate = filteredFutureTasks\n            .filter((task) => task.completedOn)\n            .filter(\n                (task) =>\n                    moment(task.completedOn).isBefore(moment().endOf(\"day\")) &&\n                    moment(task.completedOn).isAfter(moment().subtract(1, \"days\"))\n            );\n        setReservTasks(\n            (prev) =>\n                (prev = [\n                    ...filterExpiredTasksOnCompleteDate,\n                    ...filteredTodayTasks,\n                    ...filterFutureTasksOnCompleteDate,\n                ])\n        );\n        setExpiredTasks(\n            (prev) => (prev = filteredExpiredTasks.filter((task) => !task.done))\n        );\n        setTodayTasks(\n            (prev) => (prev = filteredTodayTasks.filter((task) => !task.done))\n        );\n        setFutureTasks(\n            (prev) => (prev = filteredFutureTasks.filter((task) => !task.done))\n        );\n        return tasks;\n    };\n    // methods\n\n    // data\n    const viewbagFunnel = (\n        <TasksSortedStyled>\n            <ColumnTab\n                tasks={expiredTasks}\n                type=\"Expired\"\n                setCompletedTasks={setCompletedTasks}\n                setTasks={setExpiredTasks}\n                setReservTasks={setReservTasks}\n            >\n                Просроченные задачи\n            </ColumnTab>\n            <ColumnTab\n                tasks={todayTasks}\n                type=\"Today\"\n                setCompletedTasks={setCompletedTasks}\n                setTasks={setTodayTasks}\n            >\n                Задачи на сегодня\n            </ColumnTab>\n            <ColumnTab\n                tasks={futureTasks}\n                type=\"Tomorrow\"\n                setCompletedTasks={setCompletedTasks}\n                setTasks={setFutureTasks}\n                setReservTasks={setReservTasks}\n            >\n                Будущие задачи\n            </ColumnTab>\n        </TasksSortedStyled>\n    );\n    const viewbagTable = (\n        <React.Fragment>\n            <TableTab\n                tasks={allTasks}\n                setReservTasks={setReservTasks}\n                setCompletedTasks={setCompletedTasks}\n                setTodayTasks={setTodayTasks}\n                setExpiredTasks={setExpiredTasks}\n                setTomorrowTasks={setFutureTasks}\n            />\n        </React.Fragment>\n    );\n    // data\n\n    return (\n        <TahomaWrapper>\n            <UpperPanelFirstLayer>\n                <Progress\n                    reservTasks={reservTasks}\n                    completedTasks={completedTasks}\n                    statusTasks={statusTasks}\n                />\n            </UpperPanelFirstLayer>\n            <UpperPanelSecondLayer>\n                <Filter filterObj={{filter, setFilter}}/>\n                <CreateTask\n                    url={Url}\n                    filterTasks={filterTasks}\n                    setAllTasks={setAllTasks}\n                />\n            </UpperPanelSecondLayer>\n            <TabsBlock viewbagFunnel={viewbagFunnel} viewbagTable={viewbagTable}/>\n        </TahomaWrapper>\n    );\n};\n\nexport default Tasks;\n","export const createTagQueryString = (filter) => {\n    if (!filter.length) return \"\"\n    if (filter.length === 1) return `?tag=${filter[0]}`\n    return `?tag=${filter[0]}${filter.filter(el => el !== filter[0]).map(el => el = `&tag=${el}`).join(\"\")}`\n}"],"sourceRoot":""}